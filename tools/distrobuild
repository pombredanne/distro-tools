#!/usr/bin/python

import sys
import os
import os.path
import shutil
import json
import re
import subprocess
import logging as log

# by default, we want logging enabled and show timestamps
log.basicConfig(level=log.INFO, format='%(asctime)s %(message)s', datefmt='%m/%d/%Y %H:%M:%S')

def _launchProc(cmd, verbose=False, env=None):
	""" Executes a command in a subprocess, suppressing all output. If the command fails (errcode is not 0), the stderr
	is printed and the script exits with code 1. """
	with open(os.devnull, 'w') as devnull:
		if verbose:
			proc = subprocess.Popen(cmd, shell=True, env=env)
		else:
			proc = subprocess.Popen(cmd, shell=True, stdin=devnull, stdout=subprocess.PIPE, stderr=subprocess.PIPE, env=env)
		ret = proc.communicate()
		if proc.returncode:
			log.error("Error: %s" % '\n'.join(ret))
			exit(1)

def loadConfig(filename):
	with open(filename) as f:
		return json.load(f)

def bootstrap(release, target, mirror, arch="amd64"):
	""" Crate a bootstrap chroot-ready system in a target directory. """
	cmd = "debootstrap --variant=minbase --arch=%s %s %s %s" % (arch, release, target, mirror)
	_launchProc(cmd)

def installPackages(packages, target):
	""" Given a list of packages, installs them in a target chroot-able directory. """

	# first, sync with repo
	log.info("Updating package lists...")
	cmd = "chroot %s apt-get -y update" % target
	_launchProc(cmd)

	# and now install packages one by one
	env = {
		'DEBIAN_FRONTEND': "noninteractive",
		'PATH': "/bin:/sbin:/usr/bin:/usr/sbin",
	}

	for p in packages:
		log.info("Installing '" + p + "'...")
		cmd = "chroot %s apt-get -y install %s" % (target, p)
		_launchProc(cmd, False, env)

if __name__ == "__main__":
	cfg = loadConfig("distro.conf")
	log.info("JSON configuration file loaded")

	if not os.getuid() == 0:
		log.error("Need to be launched as root!")
		exit(1)

	log.info("Creating bootstrap system...")
	bootstrap(cfg['release'], "distro", cfg['mirror'])

	log.info("Installing packages...")
	installPackages(cfg['packages'], "distro")
