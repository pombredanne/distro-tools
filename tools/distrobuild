#!/usr/bin/python

import sys
import os
import os.path
import shutil
import json
import re
import subprocess
import logging as log
import time
import argparse

VERBOSE = False

# by default, we want logging enabled and show timestamps
log.basicConfig(level=log.INFO, format='%(asctime)s %(message)s', datefmt='%m/%d/%Y %H:%M:%S')

def _launchProc(cmd, env=None):
	""" Executes a command in a subprocess, suppressing all output. If the command fails (return code is not 0), the stderr
	is printed and the script exits with code 1. """
	with open(os.devnull, 'w') as devnull:
		if VERBOSE:
			proc = subprocess.Popen(cmd, shell=True, env=env)
		else:
			proc = subprocess.Popen(cmd, shell=True, stdin=devnull, stdout=subprocess.PIPE, stderr=subprocess.PIPE, env=env)
		ret = proc.communicate()
		if proc.returncode:
			if not VERBOSE:
				log.error("Error: " + '\n'.join(ret))
			exit(1)

def loadConfig(filename):
	with open(filename) as f:
		try:
			return json.load(f)
		except Exception as err:
			log.error(err)

def bootstrap(release, components, target, mirror, arch):
	""" Crate a bootstrap chroot-ready system in a target directory. """

	components = ','.join(components)
	cmd = "debootstrap --variant=minbase --components=%s --arch=%s %s %s %s" % (components, arch, release, target, mirror)
	_launchProc(cmd)

def installPackages(packages, target, release, mirrors):
	""" Given a list of packages, installs them in a target chroot-able directory. """

	# add additional entries to target's /etc/apt/sources.list file
	if mirrors:
		with open(target + '/etc/apt/sources.list', 'a') as sources_list:
			for line in mirrors:
				if not line:
					continue

				components = ""

				if len(line) > 1:
					components = ' ' + ' '.join(line[1:])

				sources_list.write('deb ' + line[0] + ' ' + release + components)

	# first, sync with repo
	log.info("   Updating package lists...")
	cmd = "chroot %s apt-get -y update" % target
	_launchProc(cmd)

	# and now install packages one by one
	env = {
		'DEBIAN_FRONTEND': "noninteractive",
		'PATH': "/bin:/sbin:/usr/bin:/usr/sbin",
	}

	for p in packages:
		log.info("   Installing '" + p + "'...")
		cmd = "chroot %s apt-get -y --force-yes install %s" % (target, p)
		_launchProc(cmd, env)

	# clean cache
	_launchProc("chroot %s apt-get -y clean" % target)
	_launchProc("chroot %s apt-get -y autoclean" % target)

if __name__ == "__main__":
	startTime = time.time()

	# add some options and argument parsing stuff!
	parser = argparse.ArgumentParser()

	parser.add_argument("targets", metavar="target", default=["release", "devel"], help="distribution target to build (release, devel, default: both)", nargs="*")
	parser.add_argument("-v", "--verbose", help="print out everything!", action="store_true")
	parser.add_argument("-r", "--rebuild", help="rebuild targets from scratch, wiping any existing ones", action="store_true")
	parser.add_argument("-p", "--pack", help="compress the resulting targets", action="store_true")
	parser.add_argument("--config", metavar="FILE", help="path to JSON configuration file (default: distro.conf)", default="distro.conf")

	args = parser.parse_args()

	# check arguments validity
	for t in args.targets:
		if not t in ["release", "devel"]:
			log.error("Unknown target '%s'!" % t)
			exit(1)

	# load configuration
	cfg = loadConfig(args.config)
	log.info("JSON configuration file loaded")

	VERBOSE = args.verbose

	# check if the script is launched as root
	if not os.getuid() == 0:
		log.error("Need to be launched as root!")
		exit(1)

	# in case of interrupted last run or fresh new build request, cleanup
	# everything
	if os.path.exists(".lock"):
		log.info("Last run was interrupted!")
		os.remove(".lock")
		args.rebuild = True
	elif not args.rebuild:
		fresh = True
		for path in ['.devel', '.release']:
			if os.path.exists(path):
				fresh = False
		args.rebuild = fresh

	_launchProc("touch .lock")

	if args.rebuild:
		log.info("Proceeding with fresh build...")
		for t in args.targets:
			for path in [t, '.'+t]:
				if os.path.exists(path):
					log.info("   Wiping '%s'..." % path)
					shutil.rmtree(path)

		log.info("Building bootstrap system...")
		bootstrap(cfg['release'], cfg['components'], ".bootstrap", cfg['bootstrap-mirror'], cfg['arch'])

		if 'release' in args.targets:
			log.info("Building release system...")
			_launchProc("cp -r .bootstrap .release")
			installPackages(cfg['packages'], ".release", cfg['release'], cfg['package-mirrors'])

		if 'devel' in args.targets:
			log.info("Building development system...")
			_launchProc("cp -r .bootstrap .devel")
			installPackages(cfg['packages-dev'], ".devel", cfg['release'], cfg['package-mirrors'])

		log.info("Cleaning up bootstrap system...")
		shutil.rmtree(".bootstrap")

	# apply add-ons
	for t in args.targets:
		if os.path.exists("." + t):
			if not os.path.exists(t + "-addon"):
				log.warning("Add-on for target '%s' does not exist, skipped!" % t)
				continue

			log.info("Applying '%s-addon'..." % t)
			if os.path.exists(t):
				shutil.rmtree(t)
			_launchProc("cp -r .%s %s" % (t, t))
			_launchProc("cp -r %s-addon/* %s" % (t, t))

		else:
			log.warning("Target '%s' was not built, add-on applying skipped!" % t)
			continue

	os.remove(".lock")
	log.info("Finished in %s minutes." % str((time.time() - startTime)/60.0))
