#!/usr/bin/python

import sys
import os
import os.path
import shutil
import json
import re
import subprocess
import logging as log
import time

VERBOSE = False

# by default, we want logging enabled and show timestamps
log.basicConfig(level=log.INFO, format='%(asctime)s %(message)s', datefmt='%m/%d/%Y %H:%M:%S')

def _launchProc(cmd, env=None):
	""" Executes a command in a subprocess, suppressing all output. If the command fails (errcode is not 0), the stderr
	is printed and the script exits with code 1. """
	with open(os.devnull, 'w') as devnull:
		if VERBOSE:
			proc = subprocess.Popen(cmd, shell=True, env=env)
		else:
			proc = subprocess.Popen(cmd, shell=True, stdin=devnull, stdout=subprocess.PIPE, stderr=subprocess.PIPE, env=env)
		ret = proc.communicate()
		if proc.returncode:
			if not VERBOSE:
				log.error("Error: " + '\n'.join(ret))
			exit(1)

def loadConfig(filename):
	with open(filename) as f:
		return json.load(f)

def bootstrap(release, components, target, mirror, arch):
	""" Crate a bootstrap chroot-ready system in a target directory. """

	components = ','.join(components)
	cmd = "debootstrap --variant=minbase --components=%s --arch=%s %s %s %s" % (components, arch, release, target, mirror)
	_launchProc(cmd)

def installPackages(packages, target, release, mirrors):
	""" Given a list of packages, installs them in a target chroot-able directory. """

	# mount some vital filesystems...
	#for fs in ["/dev", "/proc", "/sys"]:
	#	_launchProc("mount -o bind %s %s" % (fs, target+fs))

	# add additional entries to target's /etc/apt/sources.list file
	if mirrors:
		with open(target + '/etc/apt/sources.list', 'a') as sources_list:
			for line in mirrors:
				if not line:
					continue

				components = ""

				if len(line) > 1:
					components = ' ' + ' '.join(line[1:])

				sources_list.write('deb ' + line[0] + ' ' + release + components)

	# first, sync with repo
	log.info("   Updating package lists...")
	cmd = "chroot %s apt-get -y update" % target
	_launchProc(cmd)

	# and now install packages one by one
	env = {
		'DEBIAN_FRONTEND': "noninteractive",
		'PATH': "/bin:/sbin:/usr/bin:/usr/sbin",
	}

	for p in packages:
		log.info("   Installing '" + p + "'...")
		cmd = "chroot %s apt-get -y --force-yes install %s" % (target, p)
		_launchProc(cmd, env)

	# clean cache
	_launchProc("chroot %s apt-get -y clean" % target)
	_launchProc("chroot %s apt-get -y autoclean" % target)

	# umount filesystems
	#for fs in ["/dev", "/proc", "/sys"]:
	#	with open(os.devnull, 'wb') as devnull:
	#		subprocess.call("umount " + target + fs, shell=True, stdout=devnull, stderr=devnull)

if __name__ == "__main__":
	startTime = time.time()

	cfg = loadConfig("distro.conf")
	log.info("JSON configuration file loaded")

	try:
		VERBOSE = cfg['verbose']
	except:
		pass

	if not os.getuid() == 0:
		log.error("Need to be launched as root!")
		exit(1)

	for path in ['bootstrap', 'devel', 'release']:
		if os.path.exists(path):
			log.info("Wiping '%s'..." % path)
			shutil.rmtree(path)

	log.info("Building bootstrap system...")
	bootstrap(cfg['release'], cfg['components'], "bootstrap", cfg['bootstrap-mirror'], cfg['arch'])

	if len(sys.argv) > 1:
		removeBootstrap = False

		if 'release' in sys.argv:
			log.info("Building release system...")
			_launchProc("cp -r bootstrap release")
			installPackages(cfg['packages'], "release", cfg['release'], cfg['package-mirrors'])
			removeBootstrap = True

		if 'devel' in sys.argv:
			log.info("Building development system...")
			_launchProc("cp -r bootstrap devel")
			installPackages(cfg['packages-dev'], "devel", cfg['release'], cfg['package-mirrors'])
			removeBootstrap = True

		if removeBootstrap:
			shutil.rmtree("bootstrap")

	# check if there are addons to be merged with target filesystems and eventually apply them
	for addon in [('devel-addon', 'devel'), ('release-addon', 'release')]:
		if os.path.exists(addon[0]) and os.path.exists(addon[1]):
			log.info("Applying %s..." % addon[0])
			_launchProc("cp -r %s/* %s" % addon)

	log.info("Finished in %s minutes." % str((time.time() - startTime)/60.0))
